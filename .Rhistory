netboxGraph = graphOutput,
netboxCommunity = community,
netboxOutput = netboxOutput,
nodeType = selectedNodeType,
moduleMembership = moduleMembershipFrame,
neighborData = neighborListFrame
)
return(result)
}
method = "louvain"
w = "weights"
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="louvain",
useWeights = TRUE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
head(E(graphReduced)$weights)
E(graphReduced)$weights
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="leiden",
useWeights = TRUE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
dataset = "netbox2010"
method = "louvain"
w = "weights"
sifNetwork <- netbox2010_weights$network
graphReduced <- networkSimplify(sifNetwork,directed = FALSE)
geneList <- as.character(netbox2010_weights$geneList)
length(geneList)
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="louvain",
useWeights = FALSE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="louvain",
useWeights = TRUE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
dataset = "netbox2010"
method = "leiden"
w = "no_weights"
sifNetwork <- netbox2010_weights$network
graphReduced <- networkSimplify(sifNetwork,directed = FALSE)
geneList <- as.character(netbox2010_weights$geneList)
length(geneList)
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="leiden",
useWeights = FALSE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
dataset = "netbox2010"
method = "leiden"
w = "weights"
sifNetwork <- netbox2010_weights$network
graphReduced <- networkSimplify(sifNetwork,directed = FALSE)
geneList <- as.character(netbox2010_weights$geneList)
length(geneList)
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="leiden",
useWeights = TRUE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
load("pathway_commons_v8_reactome_weights.rda")
dataset = "pathway_commons_"
method = "leiden"
w = "weights"
sifNetwork <- pathway_commons_v8_reactome_weights$network
graphReduced <- networkSimplify(sifNetwork,directed = FALSE)
geneList <- as.character(pathway_commons_v8_reactome_weights$geneList)
length(geneList)
E(graphReduced)$weights
dataset = "pathway_commons_"
method = "louvain"
w = "no_weights"
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="louvain",
useWeights = FALSE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
dataset = "pathway_commons_"
method = "louvain"
w = "weights"
sifNetwork <- pathway_commons_v8_reactome_weights$network
graphReduced <- networkSimplify(sifNetwork,directed = FALSE)
geneList <- as.character(pathway_commons_v8_reactome_weights$geneList)
length(geneList)
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="louvain",
useWeights = TRUE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
dataset = "pathway_commons_"
method = "leiden"
w = "no_weights"
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="leiden",
useWeights = FALSE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
dataset = "pathway_commons_"
method = "leiden"
w = "weights"
threshold <- 0.05
results <- geneConnector(geneList=geneList,
networkGraph=graphReduced,
directed=FALSE,
pValueAdj="BH",
pValueCutoff=threshold,
communityMethod="leiden",
useWeights = TRUE,
keepIsolatedNodes=FALSE)
# Add edge annotations
edges <- results$netboxOutput
interactionType<-unique(edges[,2])
interactionTypeColor<-brewer.pal(length(interactionType),name="Spectral")
edgeColors<-data.frame(interactionType,interactionTypeColor,stringsAsFactors = FALSE)
colnames(edgeColors)<-c("INTERACTION_TYPE","COLOR")
netboxGraphAnnotated <- annotateGraph(netboxResults = results,
edgeColors = edgeColors,
directed = FALSE,
linker = TRUE)
# Check the p-value of the selected linker
linkerDF <- results$neighborData
linkerDF[linkerDF$pValueFDR<threshold,]
# The geneConnector function returns a list of data frames.
names(results)
# Plot graph with the Fruchterman-Reingold layout algorithm
# As an example, plot both the original and the annotated graphs
# Save the layout for easier comparison
graph_layout <- layout_with_fr(results$netboxGraph)
png(paste(dataset, "_", method, "_", w, ".png", sep = ""), height = 1000, width = 1000)
# plot the original graph
plot(results$netboxCommunity,results$netboxGraph, layout=graph_layout)
# Plot the edge annotated graph
plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout,
vertex.size = 10,
vertex.shape = V(netboxGraphAnnotated)$shape,
edge.color = E(netboxGraphAnnotated)$interactionColor,
edge.width = 3)
# Add interaction type annotations
legend("bottomleft",
legend=interactionType,
col=interactionTypeColor,
lty=1,lwd=2,
bty="n",
cex=1)
dev.off()
pkg_deps_tree("sajo/netboxr")
pak::pkg_deps_tree("cannin/netboxr")
install.packages("xml2")
library(netboxr)
